//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reactivity.Nodes.ReactivityNodeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://service.reac.tivity.org", ConfigurationName="ReactivityNodeService.INodeService")]
    public interface INodeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/SessionNew", ReplyAction="http://service.reac.tivity.org/INodeService/SessionNewResponse")]
        System.Guid SessionNew();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/SessionExists", ReplyAction="http://service.reac.tivity.org/INodeService/SessionExistsResponse")]
        bool SessionExists(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/INodeService/SessionAbandon")]
        void SessionAbandon(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/INodeService/SessionKeepAlive")]
        void SessionKeepAlive(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/NodeEventGet", ReplyAction="http://service.reac.tivity.org/INodeService/NodeEventGetResponse")]
        Reactivity.Objects.NodeEvent[] NodeEventGet(int timeout, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/DeviceRegister", ReplyAction="http://service.reac.tivity.org/INodeService/DeviceRegisterResponse")]
        bool DeviceRegister(System.Guid device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/DeviceGet", ReplyAction="http://service.reac.tivity.org/INodeService/DeviceGetResponse")]
        Reactivity.Objects.Device DeviceGet(System.Guid device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/INodeService/DeviceDeregister")]
        void DeviceDeregister(System.Guid device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/INodeService/DeviceDeregisterAll")]
        void DeviceDeregisterAll(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/INodeService/DeviceIsRegisterred", ReplyAction="http://service.reac.tivity.org/INodeService/DeviceIsRegisterredResponse")]
        bool DeviceIsRegisterred(System.Guid device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/INodeService/DataUpload")]
        void DataUpload(Reactivity.Objects.Data[] data, System.Guid session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface INodeServiceChannel : Reactivity.Nodes.ReactivityNodeService.INodeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class NodeServiceClient : System.ServiceModel.ClientBase<Reactivity.Nodes.ReactivityNodeService.INodeService>, Reactivity.Nodes.ReactivityNodeService.INodeService {
        
        public NodeServiceClient() {
        }
        
        public NodeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NodeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NodeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid SessionNew() {
            return base.Channel.SessionNew();
        }
        
        public bool SessionExists(System.Guid session) {
            return base.Channel.SessionExists(session);
        }
        
        public void SessionAbandon(System.Guid session) {
            base.Channel.SessionAbandon(session);
        }
        
        public void SessionKeepAlive(System.Guid session) {
            base.Channel.SessionKeepAlive(session);
        }
        
        public Reactivity.Objects.NodeEvent[] NodeEventGet(int timeout, System.Guid session) {
            return base.Channel.NodeEventGet(timeout, session);
        }
        
        public bool DeviceRegister(System.Guid device, System.Guid session) {
            return base.Channel.DeviceRegister(device, session);
        }
        
        public Reactivity.Objects.Device DeviceGet(System.Guid device, System.Guid session) {
            return base.Channel.DeviceGet(device, session);
        }
        
        public void DeviceDeregister(System.Guid device, System.Guid session) {
            base.Channel.DeviceDeregister(device, session);
        }
        
        public void DeviceDeregisterAll(System.Guid session) {
            base.Channel.DeviceDeregisterAll(session);
        }
        
        public bool DeviceIsRegisterred(System.Guid device, System.Guid session) {
            return base.Channel.DeviceIsRegisterred(device, session);
        }
        
        public void DataUpload(Reactivity.Objects.Data[] data, System.Guid session) {
            base.Channel.DataUpload(data, session);
        }
    }
}
