//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reactivity.Clients.ReactivityClientService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginResult", Namespace="http://schemas.datacontract.org/2004/07/Reactivity.Server.Clients")]
    public enum UserLoginResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidArgument = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mismatch = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidUsername = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserAlreadyLoggedIn = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidSession = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://service.reac.tivity.org", ConfigurationName="ReactivityClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/SessionNew", ReplyAction="http://service.reac.tivity.org/IClientService/SessionNewResponse")]
        System.Guid SessionNew();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/SessionExists", ReplyAction="http://service.reac.tivity.org/IClientService/SessionExistsResponse")]
        bool SessionExists(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/SessionAbandon")]
        void SessionAbandon(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/SessionKeepAlive")]
        void SessionKeepAlive(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/ClientEventGet", ReplyAction="http://service.reac.tivity.org/IClientService/ClientEventGetResponse")]
        Reactivity.Objects.ClientEvent[] ClientEventGet(int timeout, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/Subscribe", ReplyAction="http://service.reac.tivity.org/IClientService/SubscribeResponse")]
        Reactivity.Objects.Subscription Subscribe(System.Guid device, short service, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/Unsubscribe")]
        void Unsubscribe(System.Guid subscription, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/UnsubscribeAll")]
        void UnsubscribeAll(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/ResourceGetIndex", ReplyAction="http://service.reac.tivity.org/IClientService/ResourceGetIndexResponse")]
        string ResourceGetIndex(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/ResourceGet", ReplyAction="http://service.reac.tivity.org/IClientService/ResourceGetResponse")]
        byte[] ResourceGet(System.Guid guid, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/ResourceGetStream", ReplyAction="http://service.reac.tivity.org/IClientService/ResourceGetStreamResponse")]
        System.IO.Stream ResourceGetStream(System.Guid guid, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserLogin", ReplyAction="http://service.reac.tivity.org/IClientService/UserLoginResponse")]
        Reactivity.Clients.ReactivityClientService.UserLoginResult UserLogin(string username, string hashpassword, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/UserLogout")]
        void UserLogout(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserCurrent", ReplyAction="http://service.reac.tivity.org/IClientService/UserCurrentResponse")]
        Reactivity.Objects.User UserCurrent(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserIsLoggedIn", ReplyAction="http://service.reac.tivity.org/IClientService/UserIsLoggedInResponse")]
        bool UserIsLoggedIn(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserChangePassword", ReplyAction="http://service.reac.tivity.org/IClientService/UserChangePasswordResponse")]
        bool UserChangePassword(string hashpassword, string hashnewpassword, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserCreate", ReplyAction="http://service.reac.tivity.org/IClientService/UserCreateResponse")]
        int UserCreate(Reactivity.Objects.User user, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserRemove", ReplyAction="http://service.reac.tivity.org/IClientService/UserRemoveResponse")]
        bool UserRemove(int user, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserList", ReplyAction="http://service.reac.tivity.org/IClientService/UserListResponse")]
        Reactivity.Objects.User[] UserList(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserUpdate", ReplyAction="http://service.reac.tivity.org/IClientService/UserUpdateResponse")]
        bool UserUpdate(Reactivity.Objects.User user, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserSetPassword", ReplyAction="http://service.reac.tivity.org/IClientService/UserSetPasswordResponse")]
        bool UserSetPassword(int user, string hashpassword, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserGet", ReplyAction="http://service.reac.tivity.org/IClientService/UserGetResponse")]
        Reactivity.Objects.User UserGet(int id, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/UserGetByUsername", ReplyAction="http://service.reac.tivity.org/IClientService/UserGetByUsernameResponse")]
        Reactivity.Objects.User UserGetByUsername(string username, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/RuleList", ReplyAction="http://service.reac.tivity.org/IClientService/RuleListResponse")]
        Reactivity.Objects.Rule[] RuleList(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/RuleGet", ReplyAction="http://service.reac.tivity.org/IClientService/RuleGetResponse")]
        Reactivity.Objects.Rule RuleGet(int id, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/RuleCreate", ReplyAction="http://service.reac.tivity.org/IClientService/RuleCreateResponse")]
        int RuleCreate(Reactivity.Objects.Rule rule, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/RuleRemove", ReplyAction="http://service.reac.tivity.org/IClientService/RuleRemoveResponse")]
        bool RuleRemove(int id, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/RuleUpdate", ReplyAction="http://service.reac.tivity.org/IClientService/RuleUpdateResponse")]
        bool RuleUpdate(Reactivity.Objects.Rule rule, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/RuleChainReload")]
        void RuleChainReload(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/RuleChainReloadFromDatabase")]
        void RuleChainReloadFromDatabase(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/DeviceList", ReplyAction="http://service.reac.tivity.org/IClientService/DeviceListResponse")]
        Reactivity.Objects.Device[] DeviceList(System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/DeviceGet", ReplyAction="http://service.reac.tivity.org/IClientService/DeviceGetResponse")]
        Reactivity.Objects.Device DeviceGet(System.Guid guid, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/DeviceCreate", ReplyAction="http://service.reac.tivity.org/IClientService/DeviceCreateResponse")]
        bool DeviceCreate(Reactivity.Objects.Device device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/DeviceRemove", ReplyAction="http://service.reac.tivity.org/IClientService/DeviceRemoveResponse")]
        bool DeviceRemove(System.Guid guid, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/DeviceUpdate", ReplyAction="http://service.reac.tivity.org/IClientService/DeviceUpdateResponse")]
        bool DeviceUpdate(Reactivity.Objects.Device device, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://service.reac.tivity.org/IClientService/DataSend")]
        void DataSend(Reactivity.Objects.Data[] data, System.Guid session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://service.reac.tivity.org/IClientService/StatisticsQuery", ReplyAction="http://service.reac.tivity.org/IClientService/StatisticsQueryResponse")]
        Reactivity.Objects.Statistics[] StatisticsQuery(System.Guid device, short service, System.DateTime start_date, System.DateTime end_date, Reactivity.Objects.StatisticsType type, System.Guid session);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IClientServiceChannel : Reactivity.Clients.ReactivityClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<Reactivity.Clients.ReactivityClientService.IClientService>, Reactivity.Clients.ReactivityClientService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid SessionNew() {
            return base.Channel.SessionNew();
        }
        
        public bool SessionExists(System.Guid session) {
            return base.Channel.SessionExists(session);
        }
        
        public void SessionAbandon(System.Guid session) {
            base.Channel.SessionAbandon(session);
        }
        
        public void SessionKeepAlive(System.Guid session) {
            base.Channel.SessionKeepAlive(session);
        }
        
        public Reactivity.Objects.ClientEvent[] ClientEventGet(int timeout, System.Guid session) {
            return base.Channel.ClientEventGet(timeout, session);
        }
        
        public Reactivity.Objects.Subscription Subscribe(System.Guid device, short service, System.Guid session) {
            return base.Channel.Subscribe(device, service, session);
        }
        
        public void Unsubscribe(System.Guid subscription, System.Guid session) {
            base.Channel.Unsubscribe(subscription, session);
        }
        
        public void UnsubscribeAll(System.Guid session) {
            base.Channel.UnsubscribeAll(session);
        }
        
        public string ResourceGetIndex(System.Guid session) {
            return base.Channel.ResourceGetIndex(session);
        }
        
        public byte[] ResourceGet(System.Guid guid, System.Guid session) {
            return base.Channel.ResourceGet(guid, session);
        }
        
        public System.IO.Stream ResourceGetStream(System.Guid guid, System.Guid session) {
            return base.Channel.ResourceGetStream(guid, session);
        }
        
        public Reactivity.Clients.ReactivityClientService.UserLoginResult UserLogin(string username, string hashpassword, System.Guid session) {
            return base.Channel.UserLogin(username, hashpassword, session);
        }
        
        public void UserLogout(System.Guid session) {
            base.Channel.UserLogout(session);
        }
        
        public Reactivity.Objects.User UserCurrent(System.Guid session) {
            return base.Channel.UserCurrent(session);
        }
        
        public bool UserIsLoggedIn(System.Guid session) {
            return base.Channel.UserIsLoggedIn(session);
        }
        
        public bool UserChangePassword(string hashpassword, string hashnewpassword, System.Guid session) {
            return base.Channel.UserChangePassword(hashpassword, hashnewpassword, session);
        }
        
        public int UserCreate(Reactivity.Objects.User user, System.Guid session) {
            return base.Channel.UserCreate(user, session);
        }
        
        public bool UserRemove(int user, System.Guid session) {
            return base.Channel.UserRemove(user, session);
        }
        
        public Reactivity.Objects.User[] UserList(System.Guid session) {
            return base.Channel.UserList(session);
        }
        
        public bool UserUpdate(Reactivity.Objects.User user, System.Guid session) {
            return base.Channel.UserUpdate(user, session);
        }
        
        public bool UserSetPassword(int user, string hashpassword, System.Guid session) {
            return base.Channel.UserSetPassword(user, hashpassword, session);
        }
        
        public Reactivity.Objects.User UserGet(int id, System.Guid session) {
            return base.Channel.UserGet(id, session);
        }
        
        public Reactivity.Objects.User UserGetByUsername(string username, System.Guid session) {
            return base.Channel.UserGetByUsername(username, session);
        }
        
        public Reactivity.Objects.Rule[] RuleList(System.Guid session) {
            return base.Channel.RuleList(session);
        }
        
        public Reactivity.Objects.Rule RuleGet(int id, System.Guid session) {
            return base.Channel.RuleGet(id, session);
        }
        
        public int RuleCreate(Reactivity.Objects.Rule rule, System.Guid session) {
            return base.Channel.RuleCreate(rule, session);
        }
        
        public bool RuleRemove(int id, System.Guid session) {
            return base.Channel.RuleRemove(id, session);
        }
        
        public bool RuleUpdate(Reactivity.Objects.Rule rule, System.Guid session) {
            return base.Channel.RuleUpdate(rule, session);
        }
        
        public void RuleChainReload(System.Guid session) {
            base.Channel.RuleChainReload(session);
        }
        
        public void RuleChainReloadFromDatabase(System.Guid session) {
            base.Channel.RuleChainReloadFromDatabase(session);
        }
        
        public Reactivity.Objects.Device[] DeviceList(System.Guid session) {
            return base.Channel.DeviceList(session);
        }
        
        public Reactivity.Objects.Device DeviceGet(System.Guid guid, System.Guid session) {
            return base.Channel.DeviceGet(guid, session);
        }
        
        public bool DeviceCreate(Reactivity.Objects.Device device, System.Guid session) {
            return base.Channel.DeviceCreate(device, session);
        }
        
        public bool DeviceRemove(System.Guid guid, System.Guid session) {
            return base.Channel.DeviceRemove(guid, session);
        }
        
        public bool DeviceUpdate(Reactivity.Objects.Device device, System.Guid session) {
            return base.Channel.DeviceUpdate(device, session);
        }
        
        public void DataSend(Reactivity.Objects.Data[] data, System.Guid session) {
            base.Channel.DataSend(data, session);
        }
        
        public Reactivity.Objects.Statistics[] StatisticsQuery(System.Guid device, short service, System.DateTime start_date, System.DateTime end_date, Reactivity.Objects.StatisticsType type, System.Guid session) {
            return base.Channel.StatisticsQuery(device, service, start_date, end_date, type, session);
        }
    }
}
